{"version":3,"sources":["component/task/task.component.jsx","component/todo/todo.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Task","text","deleteToDo","id","important","setImportant","className","onClick","ToDo","useState","inputValue","setInputValue","Math","floor","random","importantStatus","todos","setToDos","removeArr","filter","todo","a","map","item","onChange","e","target","value","type","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAceA,EAXF,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,GAAIC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC7C,OACI,sBAAKC,UAAWF,EAAY,iBAAmB,OAA/C,UAAwDH,EACpD,sBAAKK,UAAU,MAAf,UACI,wBAAQA,UAAU,mBAAmBC,QAAS,kBAAMF,EAAaF,IAAjE,uBACA,wBAAQG,UAAU,gBAAgBC,QAAS,kBAAML,EAAWC,IAA5D,2BCqDDK,EAzDF,WACT,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BF,mBAAS,CAAC,CAChCR,KAAM,wFACNE,GAAIS,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,iBAAiB,GAClB,CACCd,KAAM,gEACNE,GAAIS,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,iBAAiB,GAClB,CACCd,KAAM,uDACNE,GAAIS,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,iBAAiB,KAXrB,mBAAOC,EAAP,KAAcC,EAAd,KA4BMf,EAAa,SAACC,GAChB,IAAMe,EAAY,YAAIF,GAAOG,QAAO,SAAAC,GAAI,OAAIA,EAAKjB,KAAOA,KACxDc,EAASC,IAGPb,EAAe,SAACF,GAClB,IAAIkB,EAAIL,EAAMM,KAAI,SAAAC,GACd,OAAIA,EAAKpB,KAAOA,EACL,2BAAKoB,GAAZ,IAAkBR,iBAAkBQ,EAAKR,kBAEtCQ,KAEXN,EAASI,IAGb,OACI,sBAAKf,UAAU,OAAf,UACI,0CACA,sBAAKA,UAAU,aAAf,UACI,uBAAOA,UAAU,aAAakB,SAjCxB,SAACC,GACfd,EAAcc,EAAEC,OAAOC,QAgCsCC,KAAK,OAAOD,MAAOjB,IACxE,wBAAQJ,UAAU,cAAcC,QA9B9B,WACQ,IAAdG,GAAkC,MAAdA,GAAoC,KAAdA,IAC9CO,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAChBf,KAAMS,EACNP,GAAIS,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,iBAAiB,MAErBJ,EAAc,MAuBN,oBAEHK,EAAMM,KAAI,SAAAG,GAAC,OAAI,cAAC,EAAD,CAAMxB,KAAMwB,EAAExB,KAAiBe,MAAOA,EAAOb,GAAIsB,EAAEtB,GAAID,WAAYA,EAAYG,aAAcA,EAAcD,UAAWqB,EAAEV,iBAA/FU,EAAEtB,WC7CxC0B,MARf,WACE,OACE,qBAAKvB,UAAU,MAAf,SACA,cAAC,EAAD,OCMWwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.34431cb8.chunk.js","sourcesContent":["import React from 'react'\r\nimport './task.styles.css'\r\n\r\nconst Task = ({ text, deleteToDo, id, important, setImportant }) => {\r\n    return (\r\n        <div className={important ? 'task important' : 'task'}>{text}\r\n            <div className=\"nav\">\r\n                <button className='important-button' onClick={() => setImportant(id)}>IMPORTANT</button>\r\n                <button className='delete-button' onClick={() => deleteToDo(id)}>DELETE</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task","import { useState } from 'react'\r\nimport './todo.styles.css'\r\nimport Task from '../task/task.component'\r\n\r\nconst ToDo = () => {\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [todos, setToDos] = useState([{\r\n        text: 'Выгулять собаку',\r\n        id: Math.floor(Math.random() * 10000),\r\n        importantStatus: false\r\n    }, {\r\n        text: 'Выпить кофе',\r\n        id: Math.floor(Math.random() * 10000),\r\n        importantStatus: false\r\n    }, {\r\n        text: 'Сделать ToDo List',\r\n        id: Math.floor(Math.random() * 10000),\r\n        importantStatus: false\r\n    }])\r\n\r\n    let textChanger = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    let addToDo = () => {\r\n        if (inputValue == '' || inputValue == null || inputValue == ' ') { return }\r\n        setToDos([...todos, {\r\n            text: inputValue,\r\n            id: Math.floor(Math.random() * 10000),\r\n            importantStatus: false\r\n        }])\r\n        setInputValue('')\r\n    }\r\n\r\n    const deleteToDo = (id) => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id)\r\n        setToDos(removeArr)\r\n    }\r\n\r\n    const setImportant = (id) => {\r\n        let a = todos.map(item => {\r\n            if (item.id === id) {\r\n                return { ...item, importantStatus: !item.importantStatus }\r\n            }\r\n            return item\r\n        })\r\n        setToDos(a)\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <p>ToDo List</p>\r\n            <div className=\"navigation\">\r\n                <input className='todo-input' onChange={textChanger} type='text' value={inputValue}></input>\r\n                <button className='todo-button' onClick={addToDo}>ADD</button>\r\n            </div>\r\n            {todos.map(e => <Task text={e.text} key={e.id} todos={todos} id={e.id} deleteToDo={deleteToDo} setImportant={setImportant} important={e.importantStatus} />)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDo","import './App.css';\nimport ToDo from './component/todo/todo.component'\n\nfunction App() {\n  return (\n    <div className='App'>\n    <ToDo/>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}